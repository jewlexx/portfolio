---
import type { CollectionEntry } from 'astro:content';
import BrandGit from '@tabler/icons/outline/brand-git.svg';
import LinkIcon from '@tabler/icons/outline/link.svg';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Shield from '../components/Shield.astro';
import PubDate from '../components/PubDate.astro';
import IconLink from '../components/IconLink.astro';

interface ExtraProps {
	slug: string;
}
type Props = CollectionEntry<'projects'>['data'] & ExtraProps;

const { title, description, heroImage, repo, homepage, slug, shields, toy, hideHero, pubDate } =
	Astro.props;

let pageTitle = title;

if (Astro.url.pathname.includes('/projects')) {
	pageTitle = `${title} | Juliette's Projects`;
}
---

<html lang="en">
	<head>
		<BaseHead title={pageTitle} description={description} image={heroImage} />
	</head>

	<body>
		<Header title={pageTitle} />
		<main>
			<article>
				<div class="hero-image">
					{
						heroImage && !hideHero && (
							<img
								width={1020}
								height={510}
								src={heroImage}
								alt=""
								transition:name={`${slug} hero`}
							/>
						)
					}
				</div>
				<div class="prose">
					<div class="title">
						<h1>{title}</h1>
						<i>{description}</i>
						<div class="date">
							<PubDate {pubDate} />
							<!-- {
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							} -->
						</div>
						{
							toy && (
								<p>ü§è This is a mini project, meaning it's all here. There's nothing else to it.</p>
							)
						}
						{
							shields && (
								<p class="shields">
									{shields?.map((shield) => (
										<Shield {...shield} />
									))}
								</p>
							)
						}

						<span class="links-container">
							{
								repo && (
									<IconLink
										disabled={repo === undefined}
										url={repo}
										icon={BrandGit}
										title="Git Source link"
									/>
								)
							}
							{
								homepage && (
									<IconLink
										disabled={homepage == undefined}
										url={homepage}
										icon={LinkIcon}
										title="Homepage link"
									/>
								)
							}
						</span>
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>

		<Footer />
		<style lang="scss">
			@use '../styles/transitions';

			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;

				img {
					display: block;
					margin: 0 auto;
					border-radius: 12px;
					box-shadow: var(--box-shadow);
				}
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				// margin-bottom: 1em;
				// padding: 1em 0;
				// text-align: center;
				// line-height: 1;

				h1 {
					margin: 0 0 0.5em 0;
				}
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>

		<!-- As these styles apply to components within this page, they must be global -->
		<style lang="scss" is:global>
			@use '../styles/transitions';

			.link {
				margin: 0.5rem;

				img {
					width: 2.5rem;
					height: 2.5rem;
					// Original #282a2c
					background-color: #d7d5d3;
					border-radius: 5px;
					box-shadow: inset 0px 0px 2px lighten(#d7d5d3, 10%);
					padding: 0.2rem;
					filter: invert(1);
					@include transitions.springy-transform(500ms);

					&:hover {
						transform: scale(1.2);
					}
				}
			}

			.pub-date {
				color: rgb(235, 235, 235);
			}

			.links-container {
				display: flex;
			}
		</style>
	</body>
</html>
